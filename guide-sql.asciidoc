:toc: macro
toc::[]

= SQL

For general guides on dealing or avoiding SQL, preventing SQL-injection, etc. you should study link:guide-dataaccess-layer[data-access layer].

== Naming Conventions

Here we define naming conventions that you should follow whenever you write SQL files:

* All SQL-Keywords in UPPER CASE
* Table names in upper CamlCase (e.g. `RestaurantOrder`)
* Column names in camlCase (e.g. `drinkState`)
* Indentation should be 2 spaces as suggested by OASP for every format.

=== DDL
For DDLs follow these additional guidelines:

* ID column names without underscore (e.g. `tableId`)
* Define columns and constraints inline in the statement to create the table
* Indent column types so they all start in the same text column
* Constraints should be named explicitly (to get a reasonable hint error messages) with:
** `+PK_{table}+` for primary key (name optional here as PK constraint are fundamental)
** `+FK_{table}_{property}+` for foreign keys (`+{table}+` and `+{property}+` are both on the source where the foreign key is defined)
** `+UC_{table}_{property}[_{propertyN}]*+` for unique constraints
** `+CK_{table}_{check}+` for check constraints (`+{check}+` describes the check, if it is defined on a single property it should start with the property).
* Databases have hard limitations for names (e.g. 30 characters). If you have to shorten names try to define common abbreviations in your project for according (business) terms. Especially do not just truncate the names at the limit.
* If possible add comments on table and columns to help DBAs understanding your schema. This is also honored by many tools (not only DBA-tools).

Here is a brief example of a DDL:
[source,sql]
--------
CREATE SEQUENCE HIBERNATE_SEQUENCE START WITH 100000000000;

CREATE TABLE RevInfo (
  id            NUMBER(19),
  "timestamp"   NUMBER(19,0),
  "user"        VARCHAR2(255 CHAR),
  CONSTRAINT PK_RevInfo_id PRIMARY KEY (id)
);
COMMENT ON TABLE RevInfo is 'Table with revisions for audit history';
COMMENT ON COLUMN RevInfo.id is 'Primary key of revision (changing transaction)';
COMMENT ON COLUMN RevInfo."timestamp" is 'Date and time of the change';
COMMENT ON COLUMN RevInfo."user" is 'Login of the user who triggered the change';

CREATE TABLE StaffMember(
  id                  NUMBER(19,0),
  modificationCounter NUMBER(10,0) NOT NULL,
  firstname           VARCHAR2(255 CHAR),
  lastname            VARCHAR2(255 CHAR),
  login               VARCHAR2(255 CHAR) NOT NULL,
  role                VARCHAR2(10 CHAR),
  CONSTRAINT PK_StaffMember_id PRIMARY KEY (id),
  CONSTRAINT UK_StaffMember_role UNIQUE (role)
);
COMMENT ON TABLE StaffMember is 'The employees of the restaurant';
...
--------

=== Data
For insert, update, delete, etc. of data SQL scripts should additionally follow these guidelines:

* Inserts always with the same order of columns in blocks for each table.
* Insert column values always starting with id, modificationCounter, [dtype, ] ...
* List columns with fixed length values (boolean, number, enums, etc.) before columns with free text to support alignment of multiple insert statements
* Pro Tip: Get familiar with column mode of `+notepad+++` when editing large blocks of similar insert statements.

[source,sql]
--------
INSERT INTO StaffMember(id, modificationCounter, login, role, firstname, lastname) VALUES (0, 0, 'chief', 'CHIEF', 'Charly', 'Chief');
INSERT INTO StaffMember(id, modificationCounter, login, role, firstname, lastname) VALUES (1, 0, 'cook', 'COOK', 'Carl', 'Cook');
INSERT INTO StaffMember(id, modificationCounter, login, role, firstname, lastname) VALUES (2, 0, 'waiter', 'WAITER', 'Willy', 'Waiter');
INSERT INTO StaffMember(id, modificationCounter, login, role, firstname, lastname) VALUES (3, 0, 'barkeeper', 'BARKEEPER', 'Bianca', 'Barkeeper');

INSERT INTO Product(id, modificationCounter, dtype, description) VALUES (1, 1, 'Meal', 'Schnitzel');
INSERT INTO Product(id, modificationCounter, dtype, description) VALUES (2, 1, 'Meal', 'Goulasch');
INSERT INTO Product(id, modificationCounter, dtype, description) VALUES (3, 1, 'Meal', 'Pfifferlinge');
INSERT INTO Product(id, modificationCounter, dtype, description) VALUES (4, 1, 'Meal', 'Salat');
INSERT INTO Product(id, modificationCounter, dtype, description) VALUES (5, 1, 'Meal', 'Pizza');
INSERT INTO Product(id, modificationCounter, dtype, description) VALUES (6, 1, 'Meal', 'Flammkuchen');
...
--------


See also link:guide-database-migration[Database Migrations].